{{- if .Values.chatwoot.unifiedExternalSecret.enabled }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .Values.chatwoot.unifiedExternalSecret.name }}
  namespace: {{ .Release.Namespace | default .Values.namespaceOverride }}
  labels:
    app.kubernetes.io/component: {{ .Values.chatwoot.unifiedExternalSecret.name | quote }}
    app.kubernetes.io/name: {{ include "tranzrmoves.name" . | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    {{- include "tranzrmoves.labels" . | nindent 4 }}
spec:
  secretStoreRef:
      name: {{ .Values.chatwoot.unifiedExternalSecret.existingSecretStore }}
      kind: SecretStore
  refreshInterval: {{ .Values.chatwoot.unifiedExternalSecret.refreshInterval }}
  target:
    name: {{ .Values.chatwoot.unifiedExternalSecret.targetName }}
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app.kubernetes.io/name: chatwoot
          app.kubernetes.io/component: unified-env-secrets
        annotations:
          external-secrets.io/managed: "true"
      data:
        # Template-based configuration combining multiple sources
        DATABASE_URL: "{{ `{{ .uri }}` }}"
        # Additional template keys from configuration
        {{- range $key, $value := .Values.chatwoot.unifiedExternalSecret.extraTemplateKeys }}
        {{ $key }}: "{{ `{{ .` }}{{ $key }}{{ ` }}` }}"
        {{- end }}

  # Extract secrets from Azure Key Vault
  dataFrom:
    # 1️⃣ CNPG-generated secret (Postgres credentials)
    - extract:
        key: {{ .Values.chatwoot.unifiedExternalSecret.cnpgSecretName }}

    # 2️⃣ Existing Azure-based secret (app-level config)
    - extract:
        key: {{ .Values.chatwoot.unifiedExternalSecret.azureSecretName }}
{{- end }}
